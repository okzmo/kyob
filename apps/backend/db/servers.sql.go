// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: servers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createServer = `-- name: CreateServer :one
INSERT INTO servers (
  owner_id, name, background, description, x, y, private
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, owner_id, name, background, description, x, y, private, created_at, updated_at
`

type CreateServerParams struct {
	OwnerID     int64       `json:"owner_id"`
	Name        string      `json:"name"`
	Background  string      `json:"background"`
	Description pgtype.Text `json:"description"`
	X           int32       `json:"x"`
	Y           int32       `json:"y"`
	Private     bool        `json:"private"`
}

func (q *Queries) CreateServer(ctx context.Context, arg CreateServerParams) (Server, error) {
	row := q.db.QueryRow(ctx, createServer,
		arg.OwnerID,
		arg.Name,
		arg.Background,
		arg.Description,
		arg.X,
		arg.Y,
		arg.Private,
	)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Background,
		&i.Description,
		&i.X,
		&i.Y,
		&i.Private,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteServer = `-- name: DeleteServer :execresult
DELETE FROM servers WHERE id = $1 AND owner_id = $2
`

type DeleteServerParams struct {
	ID      int64 `json:"id"`
	OwnerID int64 `json:"owner_id"`
}

func (q *Queries) DeleteServer(ctx context.Context, arg DeleteServerParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteServer, arg.ID, arg.OwnerID)
}

const getServer = `-- name: GetServer :one
SELECT id, owner_id, name, background, description, x, y, private, created_at, updated_at FROM servers WHERE id = $1
`

func (q *Queries) GetServer(ctx context.Context, id int64) (Server, error) {
	row := q.db.QueryRow(ctx, getServer, id)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Background,
		&i.Description,
		&i.X,
		&i.Y,
		&i.Private,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getServers = `-- name: GetServers :many
SELECT id, owner_id, name, background, description, x, y, private, created_at, updated_at FROM servers
`

func (q *Queries) GetServers(ctx context.Context) ([]Server, error) {
	rows, err := q.db.Query(ctx, getServers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Server
	for rows.Next() {
		var i Server
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Background,
			&i.Description,
			&i.X,
			&i.Y,
			&i.Private,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServersFromUser = `-- name: GetServersFromUser :many
SELECT DISTINCT s.id, s.owner_id, s.name, s.background, s.description, s.x, s.y, s.private, s.created_at, s.updated_at
FROM servers s, server_membership sm
WHERE s.private = false OR (sm.server_id = s.id AND sm.user_id = $1)
`

func (q *Queries) GetServersFromUser(ctx context.Context, userID int64) ([]Server, error) {
	rows, err := q.db.Query(ctx, getServersFromUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Server
	for rows.Next() {
		var i Server
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Background,
			&i.Description,
			&i.X,
			&i.Y,
			&i.Private,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const joinServer = `-- name: JoinServer :exec
INSERT INTO server_membership (
  user_id, server_id
) VALUES (
  $1, $2
)
`

type JoinServerParams struct {
	UserID   int64 `json:"user_id"`
	ServerID int64 `json:"server_id"`
}

func (q *Queries) JoinServer(ctx context.Context, arg JoinServerParams) error {
	_, err := q.db.Exec(ctx, joinServer, arg.UserID, arg.ServerID)
	return err
}

const ownServer = `-- name: OwnServer :execresult
SELECT id, owner_id, name, background, description, x, y, private, created_at, updated_at FROM servers WHERE id = $1 AND owner_id = $2
`

type OwnServerParams struct {
	ID      int64 `json:"id"`
	OwnerID int64 `json:"owner_id"`
}

func (q *Queries) OwnServer(ctx context.Context, arg OwnServerParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, ownServer, arg.ID, arg.OwnerID)
}

const updateServerBackground = `-- name: UpdateServerBackground :exec
UPDATE servers SET background = $1 WHERE id = $2 AND owner_id = $3
`

type UpdateServerBackgroundParams struct {
	Background string `json:"background"`
	ID         int64  `json:"id"`
	OwnerID    int64  `json:"owner_id"`
}

func (q *Queries) UpdateServerBackground(ctx context.Context, arg UpdateServerBackgroundParams) error {
	_, err := q.db.Exec(ctx, updateServerBackground, arg.Background, arg.ID, arg.OwnerID)
	return err
}

const updateServerDescription = `-- name: UpdateServerDescription :exec
UPDATE servers SET description = $1 WHERE id = $2 AND owner_id = $3
`

type UpdateServerDescriptionParams struct {
	Description pgtype.Text `json:"description"`
	ID          int64       `json:"id"`
	OwnerID     int64       `json:"owner_id"`
}

func (q *Queries) UpdateServerDescription(ctx context.Context, arg UpdateServerDescriptionParams) error {
	_, err := q.db.Exec(ctx, updateServerDescription, arg.Description, arg.ID, arg.OwnerID)
	return err
}

const updateServerName = `-- name: UpdateServerName :exec
UPDATE servers SET name = $1 WHERE id = $2 AND owner_id = $3
`

type UpdateServerNameParams struct {
	Name    string `json:"name"`
	ID      int64  `json:"id"`
	OwnerID int64  `json:"owner_id"`
}

func (q *Queries) UpdateServerName(ctx context.Context, arg UpdateServerNameParams) error {
	_, err := q.db.Exec(ctx, updateServerName, arg.Name, arg.ID, arg.OwnerID)
	return err
}
