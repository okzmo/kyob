// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: servers.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkServerPosition = `-- name: CheckServerPosition :execresult
SELECT id FROM servers WHERE (x BETWEEN $1-100 AND $1+100) AND (y BETWEEN $2-100 AND $2+100)
`

type CheckServerPositionParams struct {
	Column1 interface{} `json:"column_1"`
	Column2 interface{} `json:"column_2"`
}

func (q *Queries) CheckServerPosition(ctx context.Context, arg CheckServerPositionParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, checkServerPosition, arg.Column1, arg.Column2)
}

const createServer = `-- name: CreateServer :one
INSERT INTO servers (
  id, owner_id, name, avatar, description, private
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, owner_id, name, avatar, banner, description, private, created_at, updated_at
`

type CreateServerParams struct {
	ID          string      `json:"id"`
	OwnerID     string      `json:"owner_id"`
	Name        string      `json:"name"`
	Avatar      pgtype.Text `json:"avatar"`
	Description []byte      `json:"description"`
	Private     bool        `json:"private"`
}

func (q *Queries) CreateServer(ctx context.Context, arg CreateServerParams) (Server, error) {
	row := q.db.QueryRow(ctx, createServer,
		arg.ID,
		arg.OwnerID,
		arg.Name,
		arg.Avatar,
		arg.Description,
		arg.Private,
	)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Avatar,
		&i.Banner,
		&i.Description,
		&i.Private,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteServer = `-- name: DeleteServer :execresult
DELETE FROM servers WHERE id = $1 AND owner_id = $2
`

type DeleteServerParams struct {
	ID      string `json:"id"`
	OwnerID string `json:"owner_id"`
}

func (q *Queries) DeleteServer(ctx context.Context, arg DeleteServerParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteServer, arg.ID, arg.OwnerID)
}

const getMembersFromServers = `-- name: GetMembersFromServers :many
SELECT u.id, u.username, u.display_name, u.avatar, u.banner, sm.server_id FROM server_membership sm, users u WHERE sm.server_id = ANY($1::text[]) AND sm.user_id = u.id
`

type GetMembersFromServersRow struct {
	ID          string      `json:"id"`
	Username    string      `json:"username"`
	DisplayName string      `json:"display_name"`
	Avatar      pgtype.Text `json:"avatar"`
	Banner      pgtype.Text `json:"banner"`
	ServerID    string      `json:"server_id"`
}

func (q *Queries) GetMembersFromServers(ctx context.Context, dollar_1 []string) ([]GetMembersFromServersRow, error) {
	rows, err := q.db.Query(ctx, getMembersFromServers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMembersFromServersRow
	for rows.Next() {
		var i GetMembersFromServersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.DisplayName,
			&i.Avatar,
			&i.Banner,
			&i.ServerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServer = `-- name: GetServer :one
SELECT id, owner_id, name, avatar, banner, description, private, created_at, updated_at FROM servers WHERE id = $1
`

func (q *Queries) GetServer(ctx context.Context, id string) (Server, error) {
	row := q.db.QueryRow(ctx, getServer, id)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Avatar,
		&i.Banner,
		&i.Description,
		&i.Private,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getServerMembers = `-- name: GetServerMembers :many
SELECT u.id, u.username, u.display_name, u.avatar FROM server_membership sm, users u WHERE sm.server_id = $1 AND sm.user_id = u.id
`

type GetServerMembersRow struct {
	ID          string      `json:"id"`
	Username    string      `json:"username"`
	DisplayName string      `json:"display_name"`
	Avatar      pgtype.Text `json:"avatar"`
}

func (q *Queries) GetServerMembers(ctx context.Context, serverID string) ([]GetServerMembersRow, error) {
	rows, err := q.db.Query(ctx, getServerMembers, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetServerMembersRow
	for rows.Next() {
		var i GetServerMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.DisplayName,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServerWithChannels = `-- name: GetServerWithChannels :one
SELECT DISTINCT s.id, s.owner_id, s.name, s.avatar, s.banner, s.description, s.private, s.created_at, s.updated_at, sm.x, sm.y, (SELECT count(id) FROM server_membership smc WHERE smc.server_id=$1) AS member_count
FROM servers s, server_membership sm
WHERE s.id = $1 AND sm.server_id = s.id AND sm.user_id = $2
`

type GetServerWithChannelsParams struct {
	ServerID string `json:"server_id"`
	UserID   string `json:"user_id"`
}

type GetServerWithChannelsRow struct {
	ID          string      `json:"id"`
	OwnerID     string      `json:"owner_id"`
	Name        string      `json:"name"`
	Avatar      pgtype.Text `json:"avatar"`
	Banner      pgtype.Text `json:"banner"`
	Description []byte      `json:"description"`
	Private     bool        `json:"private"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
	X           int32       `json:"x"`
	Y           int32       `json:"y"`
	MemberCount int64       `json:"member_count"`
}

func (q *Queries) GetServerWithChannels(ctx context.Context, arg GetServerWithChannelsParams) (GetServerWithChannelsRow, error) {
	row := q.db.QueryRow(ctx, getServerWithChannels, arg.ServerID, arg.UserID)
	var i GetServerWithChannelsRow
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Avatar,
		&i.Banner,
		&i.Description,
		&i.Private,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.X,
		&i.Y,
		&i.MemberCount,
	)
	return i, err
}

const getServers = `-- name: GetServers :many
SELECT id, owner_id, name, avatar, banner, description, private, created_at, updated_at FROM servers
`

func (q *Queries) GetServers(ctx context.Context) ([]Server, error) {
	rows, err := q.db.Query(ctx, getServers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Server
	for rows.Next() {
		var i Server
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Avatar,
			&i.Banner,
			&i.Description,
			&i.Private,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServersCountFromUser = `-- name: GetServersCountFromUser :one
SELECT count(id)
FROM server_membership
WHERE user_id = $1
`

func (q *Queries) GetServersCountFromUser(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, getServersCountFromUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getServersFromUser = `-- name: GetServersFromUser :many
SELECT DISTINCT s.id, s.owner_id, s.name, s.avatar, s.banner, s.description, s.private, s.created_at, s.updated_at, sm.x, sm.y, (SELECT count(id) FROM server_membership smc WHERE smc.server_id=s.id) AS member_count
FROM servers s
LEFT JOIN server_membership sm ON sm.server_id = s.id AND sm.user_id = $1
WHERE s.id = 'global' OR sm.user_id IS NOT NULL
`

type GetServersFromUserRow struct {
	ID          string      `json:"id"`
	OwnerID     string      `json:"owner_id"`
	Name        string      `json:"name"`
	Avatar      pgtype.Text `json:"avatar"`
	Banner      pgtype.Text `json:"banner"`
	Description []byte      `json:"description"`
	Private     bool        `json:"private"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
	X           pgtype.Int4 `json:"x"`
	Y           pgtype.Int4 `json:"y"`
	MemberCount int64       `json:"member_count"`
}

func (q *Queries) GetServersFromUser(ctx context.Context, userID string) ([]GetServersFromUserRow, error) {
	rows, err := q.db.Query(ctx, getServersFromUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetServersFromUserRow
	for rows.Next() {
		var i GetServersFromUserRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Avatar,
			&i.Banner,
			&i.Description,
			&i.Private,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.X,
			&i.Y,
			&i.MemberCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isMember = `-- name: IsMember :execresult
SELECT id FROM server_membership WHERE server_id = $1 AND user_id = $2
`

type IsMemberParams struct {
	ServerID string `json:"server_id"`
	UserID   string `json:"user_id"`
}

func (q *Queries) IsMember(ctx context.Context, arg IsMemberParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, isMember, arg.ServerID, arg.UserID)
}

const joinServer = `-- name: JoinServer :exec
INSERT INTO server_membership (
  id, user_id, server_id, x, y
) VALUES (
  $1, $2, $3, $4, $5
)
`

type JoinServerParams struct {
	ID       string `json:"id"`
	UserID   string `json:"user_id"`
	ServerID string `json:"server_id"`
	X        int32  `json:"x"`
	Y        int32  `json:"y"`
}

func (q *Queries) JoinServer(ctx context.Context, arg JoinServerParams) error {
	_, err := q.db.Exec(ctx, joinServer,
		arg.ID,
		arg.UserID,
		arg.ServerID,
		arg.X,
		arg.Y,
	)
	return err
}

const leaveServer = `-- name: LeaveServer :exec
DELETE FROM server_membership WHERE user_id = $1 AND server_id = $2
`

type LeaveServerParams struct {
	UserID   string `json:"user_id"`
	ServerID string `json:"server_id"`
}

func (q *Queries) LeaveServer(ctx context.Context, arg LeaveServerParams) error {
	_, err := q.db.Exec(ctx, leaveServer, arg.UserID, arg.ServerID)
	return err
}

const ownServer = `-- name: OwnServer :execresult
SELECT id, owner_id, name, avatar, banner, description, private, created_at, updated_at FROM servers WHERE id = $1 AND owner_id = $2
`

type OwnServerParams struct {
	ID      string `json:"id"`
	OwnerID string `json:"owner_id"`
}

func (q *Queries) OwnServer(ctx context.Context, arg OwnServerParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, ownServer, arg.ID, arg.OwnerID)
}

const updateServerAvatar = `-- name: UpdateServerAvatar :exec
UPDATE servers SET avatar = $1 WHERE id = $2 AND owner_id = $3
`

type UpdateServerAvatarParams struct {
	Avatar  pgtype.Text `json:"avatar"`
	ID      string      `json:"id"`
	OwnerID string      `json:"owner_id"`
}

func (q *Queries) UpdateServerAvatar(ctx context.Context, arg UpdateServerAvatarParams) error {
	_, err := q.db.Exec(ctx, updateServerAvatar, arg.Avatar, arg.ID, arg.OwnerID)
	return err
}

const updateServerBanner = `-- name: UpdateServerBanner :exec
UPDATE servers SET banner = $1 WHERE id = $2 AND owner_id = $3
`

type UpdateServerBannerParams struct {
	Banner  pgtype.Text `json:"banner"`
	ID      string      `json:"id"`
	OwnerID string      `json:"owner_id"`
}

func (q *Queries) UpdateServerBanner(ctx context.Context, arg UpdateServerBannerParams) error {
	_, err := q.db.Exec(ctx, updateServerBanner, arg.Banner, arg.ID, arg.OwnerID)
	return err
}

const updateServerDescription = `-- name: UpdateServerDescription :exec
UPDATE servers SET description = $1 WHERE id = $2 AND owner_id = $3
`

type UpdateServerDescriptionParams struct {
	Description []byte `json:"description"`
	ID          string `json:"id"`
	OwnerID     string `json:"owner_id"`
}

func (q *Queries) UpdateServerDescription(ctx context.Context, arg UpdateServerDescriptionParams) error {
	_, err := q.db.Exec(ctx, updateServerDescription, arg.Description, arg.ID, arg.OwnerID)
	return err
}

const updateServerName = `-- name: UpdateServerName :exec
UPDATE servers SET name = $1 WHERE id = $2 AND owner_id = $3
`

type UpdateServerNameParams struct {
	Name    string `json:"name"`
	ID      string `json:"id"`
	OwnerID string `json:"owner_id"`
}

func (q *Queries) UpdateServerName(ctx context.Context, arg UpdateServerNameParams) error {
	_, err := q.db.Exec(ctx, updateServerName, arg.Name, arg.ID, arg.OwnerID)
	return err
}
