// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type Abilities string

const (
	AbilitiesADMIN             Abilities = "ADMIN"
	AbilitiesMANAGECHANNELS    Abilities = "MANAGE_CHANNELS"
	AbilitiesMANAGEROLES       Abilities = "MANAGE_ROLES"
	AbilitiesMANAGESERVER      Abilities = "MANAGE_SERVER"
	AbilitiesMANAGEEXPRESSIONS Abilities = "MANAGE_EXPRESSIONS"
	AbilitiesCHANGENICKNAME    Abilities = "CHANGE_NICKNAME"
	AbilitiesMANAGENICKNAMES   Abilities = "MANAGE_NICKNAMES"
	AbilitiesBAN               Abilities = "BAN"
	AbilitiesKICK              Abilities = "KICK"
	AbilitiesMUTE              Abilities = "MUTE"
	AbilitiesATTACHFILES       Abilities = "ATTACH_FILES"
	AbilitiesMANAGEMESSAGES    Abilities = "MANAGE_MESSAGES"
)

func (e *Abilities) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Abilities(s)
	case string:
		*e = Abilities(s)
	default:
		return fmt.Errorf("unsupported scan type for Abilities: %T", src)
	}
	return nil
}

type NullAbilities struct {
	Abilities Abilities `json:"abilities"`
	Valid     bool      `json:"valid"` // Valid is true if Abilities is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAbilities) Scan(value interface{}) error {
	if value == nil {
		ns.Abilities, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Abilities.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAbilities) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Abilities), nil
}

type ChannelType string

const (
	ChannelTypeVoice   ChannelType = "voice"
	ChannelTypeTextual ChannelType = "textual"
)

func (e *ChannelType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChannelType(s)
	case string:
		*e = ChannelType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChannelType: %T", src)
	}
	return nil
}

type NullChannelType struct {
	ChannelType ChannelType `json:"channel_type"`
	Valid       bool        `json:"valid"` // Valid is true if ChannelType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChannelType) Scan(value interface{}) error {
	if value == nil {
		ns.ChannelType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChannelType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChannelType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChannelType), nil
}

type Channel struct {
	ID          int64       `json:"id"`
	ServerID    int64       `json:"server_id"`
	Name        string      `json:"name"`
	Type        ChannelType `json:"type"`
	Description pgtype.Text `json:"description"`
	Users       []int64     `json:"users"`
	Roles       []int64     `json:"roles"`
	X           int32       `json:"x"`
	Y           int32       `json:"y"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

type Message struct {
	ID               int64     `json:"id"`
	AuthorID         int64     `json:"author_id"`
	ChannelID        int64     `json:"channel_id"`
	Content          []byte    `json:"content"`
	MentionsUsers    []int64   `json:"mentions_users"`
	MentionsChannels []int64   `json:"mentions_channels"`
	Attached         []string  `json:"attached"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
}

type Role struct {
	ID          int64       `json:"id"`
	ServerID    int64       `json:"server_id"`
	Name        string      `json:"name"`
	Color       string      `json:"color"`
	Description pgtype.Text `json:"description"`
	Abilities   []string    `json:"abilities"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

type Server struct {
	ID          int64       `json:"id"`
	OwnerID     int64       `json:"owner_id"`
	Name        string      `json:"name"`
	Avatar      pgtype.Text `json:"avatar"`
	Banner      pgtype.Text `json:"banner"`
	Description pgtype.Text `json:"description"`
	X           int32       `json:"x"`
	Y           int32       `json:"y"`
	Private     bool        `json:"private"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

type ServerMembership struct {
	ID       int64     `json:"id"`
	UserID   int64     `json:"user_id"`
	ServerID int64     `json:"server_id"`
	Roles    []int64   `json:"roles"`
	JoinedAt time.Time `json:"joined_at"`
}

type Token struct {
	ID       int64     `json:"id"`
	UserID   int64     `json:"user_id"`
	Token    string    `json:"token"`
	Type     string    `json:"type"`
	ExpireAt time.Time `json:"expire_at"`
}

type User struct {
	ID          int64       `json:"id"`
	Email       string      `json:"email"`
	Username    string      `json:"username"`
	Password    string      `json:"password"`
	DisplayName string      `json:"display_name"`
	Avatar      pgtype.Text `json:"avatar"`
	Banner      pgtype.Text `json:"banner"`
	About       pgtype.Text `json:"about"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}
