// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: channels.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channels (
  id, server_id, name, type, description, users, roles, x, y
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, server_id, name, type, description, users, roles, x, y, active, created_at, updated_at
`

type CreateChannelParams struct {
	ID          string      `json:"id"`
	ServerID    string      `json:"server_id"`
	Name        string      `json:"name"`
	Type        ChannelType `json:"type"`
	Description pgtype.Text `json:"description"`
	Users       []string    `json:"users"`
	Roles       []string    `json:"roles"`
	X           int32       `json:"x"`
	Y           int32       `json:"y"`
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.db.QueryRow(ctx, createChannel,
		arg.ID,
		arg.ServerID,
		arg.Name,
		arg.Type,
		arg.Description,
		arg.Users,
		arg.Roles,
		arg.X,
		arg.Y,
	)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.Name,
		&i.Type,
		&i.Description,
		&i.Users,
		&i.Roles,
		&i.X,
		&i.Y,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateChannel = `-- name: DeactivateChannel :one
UPDATE channels SET active = false
WHERE type = 'dm'
  AND array_length(users, 1) = 2
  AND $1::varchar = ANY(users) 
  AND $2::varchar = ANY(users)
RETURNING id, server_id, name, type, description, users, roles, x, y, active, created_at, updated_at
`

type DeactivateChannelParams struct {
	Column1 string `json:"column_1"`
	Column2 string `json:"column_2"`
}

func (q *Queries) DeactivateChannel(ctx context.Context, arg DeactivateChannelParams) (Channel, error) {
	row := q.db.QueryRow(ctx, deactivateChannel, arg.Column1, arg.Column2)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.Name,
		&i.Type,
		&i.Description,
		&i.Users,
		&i.Roles,
		&i.X,
		&i.Y,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChannel = `-- name: DeleteChannel :exec
DELETE FROM channels WHERE id = $1
`

func (q *Queries) DeleteChannel(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteChannel, id)
	return err
}

const getChannel = `-- name: GetChannel :one
SELECT id, server_id, name, type, description, users, roles, x, y, active, created_at, updated_at FROM channels WHERE id = $1
`

func (q *Queries) GetChannel(ctx context.Context, id string) (Channel, error) {
	row := q.db.QueryRow(ctx, getChannel, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.Name,
		&i.Type,
		&i.Description,
		&i.Users,
		&i.Roles,
		&i.X,
		&i.Y,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChannelsFromServer = `-- name: GetChannelsFromServer :many
SELECT id, server_id, name, type, description, users, roles, x, y, active, created_at, updated_at
FROM channels
WHERE server_id = $1 AND active = true
`

func (q *Queries) GetChannelsFromServer(ctx context.Context, serverID string) ([]Channel, error) {
	rows, err := q.db.Query(ctx, getChannelsFromServer, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.ServerID,
			&i.Name,
			&i.Type,
			&i.Description,
			&i.Users,
			&i.Roles,
			&i.X,
			&i.Y,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriendChannels = `-- name: GetFriendChannels :many
SELECT id, server_id, name, type, description, users, roles, x, y, active, created_at, updated_at
FROM channels
WHERE server_id = 'global' AND $1::text = ANY(users) AND active = true
`

func (q *Queries) GetFriendChannels(ctx context.Context, dollar_1 string) ([]Channel, error) {
	rows, err := q.db.Query(ctx, getFriendChannels, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.ServerID,
			&i.Name,
			&i.Type,
			&i.Description,
			&i.Users,
			&i.Roles,
			&i.X,
			&i.Y,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChannelDescription = `-- name: UpdateChannelDescription :exec
UPDATE channels SET description = $1 WHERE id = $2
`

type UpdateChannelDescriptionParams struct {
	Description pgtype.Text `json:"description"`
	ID          string      `json:"id"`
}

func (q *Queries) UpdateChannelDescription(ctx context.Context, arg UpdateChannelDescriptionParams) error {
	_, err := q.db.Exec(ctx, updateChannelDescription, arg.Description, arg.ID)
	return err
}

const updateChannelName = `-- name: UpdateChannelName :exec
UPDATE channels SET name = $1 WHERE id = $2
`

type UpdateChannelNameParams struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (q *Queries) UpdateChannelName(ctx context.Context, arg UpdateChannelNameParams) error {
	_, err := q.db.Exec(ctx, updateChannelName, arg.Name, arg.ID)
	return err
}
