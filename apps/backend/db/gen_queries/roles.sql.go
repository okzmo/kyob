// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roles.sql

package db

import (
	"context"
)

const addRoleMember = `-- name: AddRoleMember :exec
UPDATE server_membership 
SET roles = array_append(roles, $1) -- role_name
WHERE server_id = $2 AND user_id = $3
`

type AddRoleMemberParams struct {
	ArrayAppend interface{} `json:"array_append"`
	ServerID    string      `json:"server_id"`
	UserID      string      `json:"user_id"`
}

func (q *Queries) AddRoleMember(ctx context.Context, arg AddRoleMemberParams) error {
	_, err := q.db.Exec(ctx, addRoleMember, arg.ArrayAppend, arg.ServerID, arg.UserID)
	return err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
  id, idx, server_id, name, color, abilities
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, idx, server_id, name, color, abilities, created_at, updated_at
`

type CreateRoleParams struct {
	ID        string   `json:"id"`
	Idx       int32    `json:"idx"`
	ServerID  string   `json:"server_id"`
	Name      string   `json:"name"`
	Color     string   `json:"color"`
	Abilities []string `json:"abilities"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole,
		arg.ID,
		arg.Idx,
		arg.ServerID,
		arg.Name,
		arg.Color,
		arg.Abilities,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Idx,
		&i.ServerID,
		&i.Name,
		&i.Color,
		&i.Abilities,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT r.id, r.idx, r.name, r.color, r.abilities, r.server_id
FROM roles r
WHERE r.id = $1
`

type GetRoleRow struct {
	ID        string   `json:"id"`
	Idx       int32    `json:"idx"`
	Name      string   `json:"name"`
	Color     string   `json:"color"`
	Abilities []string `json:"abilities"`
	ServerID  string   `json:"server_id"`
}

func (q *Queries) GetRole(ctx context.Context, id string) (GetRoleRow, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i GetRoleRow
	err := row.Scan(
		&i.ID,
		&i.Idx,
		&i.Name,
		&i.Color,
		&i.Abilities,
		&i.ServerID,
	)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT r.id, r.idx, r.name, r.color, r.abilities, array_agg(sm.user_id) FILTER (WHERE sm.user_id IS NOT NULL) AS members
FROM roles r
LEFT JOIN server_membership sm on r.id = ANY(sm.roles)
WHERE r.server_id = $1
GROUP BY r.id
`

type GetRolesRow struct {
	ID        string      `json:"id"`
	Idx       int32       `json:"idx"`
	Name      string      `json:"name"`
	Color     string      `json:"color"`
	Abilities []string    `json:"abilities"`
	Members   interface{} `json:"members"`
}

func (q *Queries) GetRoles(ctx context.Context, serverID string) ([]GetRolesRow, error) {
	rows, err := q.db.Query(ctx, getRoles, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRolesRow
	for rows.Next() {
		var i GetRolesRow
		if err := rows.Scan(
			&i.ID,
			&i.Idx,
			&i.Name,
			&i.Color,
			&i.Abilities,
			&i.Members,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAbilities = `-- name: GetUserAbilities :many
SELECT r.abilities 
FROM roles r, server_membership sm 
WHERE sm.server_id = $1 AND sm.user_id = $2 AND r.id = ANY(sm.roles)
`

type GetUserAbilitiesParams struct {
	ServerID string `json:"server_id"`
	UserID   string `json:"user_id"`
}

func (q *Queries) GetUserAbilities(ctx context.Context, arg GetUserAbilitiesParams) ([][]string, error) {
	rows, err := q.db.Query(ctx, getUserAbilities, arg.ServerID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items [][]string
	for rows.Next() {
		var abilities []string
		if err := rows.Scan(&abilities); err != nil {
			return nil, err
		}
		items = append(items, abilities)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const moveRole = `-- name: MoveRole :exec
UPDATE roles SET idx = $1 WHERE id = $2
`

type MoveRoleParams struct {
	Idx int32  `json:"idx"`
	ID  string `json:"id"`
}

func (q *Queries) MoveRole(ctx context.Context, arg MoveRoleParams) error {
	_, err := q.db.Exec(ctx, moveRole, arg.Idx, arg.ID)
	return err
}

const removeRoleFromAllMembers = `-- name: RemoveRoleFromAllMembers :exec
UPDATE server_membership SET roles = array_remove(roles, $1) WHERE $1 = ANY(roles)
`

func (q *Queries) RemoveRoleFromAllMembers(ctx context.Context, arrayRemove interface{}) error {
	_, err := q.db.Exec(ctx, removeRoleFromAllMembers, arrayRemove)
	return err
}

const removeRoleMember = `-- name: RemoveRoleMember :exec
UPDATE server_membership SET roles = array_remove(roles, $1) WHERE server_id = $2 AND user_id = $3
`

type RemoveRoleMemberParams struct {
	ArrayRemove interface{} `json:"array_remove"`
	ServerID    string      `json:"server_id"`
	UserID      string      `json:"user_id"`
}

func (q *Queries) RemoveRoleMember(ctx context.Context, arg RemoveRoleMemberParams) error {
	_, err := q.db.Exec(ctx, removeRoleMember, arg.ArrayRemove, arg.ServerID, arg.UserID)
	return err
}

const updateRolePositions = `-- name: UpdateRolePositions :exec
UPDATE roles SET idx = idx + 1 WHERE idx >= $1 AND idx < $2
`

type UpdateRolePositionsParams struct {
	Idx   int32 `json:"idx"`
	Idx_2 int32 `json:"idx_2"`
}

func (q *Queries) UpdateRolePositions(ctx context.Context, arg UpdateRolePositionsParams) error {
	_, err := q.db.Exec(ctx, updateRolePositions, arg.Idx, arg.Idx_2)
	return err
}
