// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
  author_id, channel_id, content, mentions_users, mentions_channels, attached
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, author_id, channel_id, content, mentions_users, mentions_channels, attached, created_at, updated_at
`

type CreateMessageParams struct {
	AuthorID         int64    `json:"author_id"`
	ChannelID        int64    `json:"channel_id"`
	Content          []byte   `json:"content"`
	MentionsUsers    []int64  `json:"mentions_users"`
	MentionsChannels []int64  `json:"mentions_channels"`
	Attached         []string `json:"attached"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.AuthorID,
		arg.ChannelID,
		arg.Content,
		arg.MentionsUsers,
		arg.MentionsChannels,
		arg.Attached,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.ChannelID,
		&i.Content,
		&i.MentionsUsers,
		&i.MentionsChannels,
		&i.Attached,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :execresult
DELETE FROM messages WHERE id = $1 AND author_id = $2
`

type DeleteMessageParams struct {
	ID       int64 `json:"id"`
	AuthorID int64 `json:"author_id"`
}

func (q *Queries) DeleteMessage(ctx context.Context, arg DeleteMessageParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteMessage, arg.ID, arg.AuthorID)
}

const getMessage = `-- name: GetMessage :one
SELECT id, author_id, channel_id, content, mentions_users, mentions_channels, attached, created_at, updated_at FROM messages WHERE id = $1
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRow(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.ChannelID,
		&i.Content,
		&i.MentionsUsers,
		&i.MentionsChannels,
		&i.Attached,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMessagesFromChannel = `-- name: GetMessagesFromChannel :many
SELECT id, author_id, channel_id, content, mentions_users, mentions_channels, attached, created_at, updated_at FROM messages WHERE channel_id = $1
`

func (q *Queries) GetMessagesFromChannel(ctx context.Context, channelID int64) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesFromChannel, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.ChannelID,
			&i.Content,
			&i.MentionsUsers,
			&i.MentionsChannels,
			&i.Attached,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessageContent = `-- name: UpdateMessageContent :execresult
UPDATE messages SET content = $1 WHERE id = $2 AND author_id = $3
`

type UpdateMessageContentParams struct {
	Content  []byte `json:"content"`
	ID       int64  `json:"id"`
	AuthorID int64  `json:"author_id"`
}

func (q *Queries) UpdateMessageContent(ctx context.Context, arg UpdateMessageContentParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateMessageContent, arg.Content, arg.ID, arg.AuthorID)
}

const updateMessageMentionsChannels = `-- name: UpdateMessageMentionsChannels :execresult
UPDATE messages SET mentions_channels = $1 WHERE id = $2 AND author_id = $3
`

type UpdateMessageMentionsChannelsParams struct {
	MentionsChannels []int64 `json:"mentions_channels"`
	ID               int64   `json:"id"`
	AuthorID         int64   `json:"author_id"`
}

func (q *Queries) UpdateMessageMentionsChannels(ctx context.Context, arg UpdateMessageMentionsChannelsParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateMessageMentionsChannels, arg.MentionsChannels, arg.ID, arg.AuthorID)
}

const updateMessageMentionsUsers = `-- name: UpdateMessageMentionsUsers :execresult
UPDATE messages SET mentions_users = $1 WHERE id = $2 AND author_id = $3
`

type UpdateMessageMentionsUsersParams struct {
	MentionsUsers []int64 `json:"mentions_users"`
	ID            int64   `json:"id"`
	AuthorID      int64   `json:"author_id"`
}

func (q *Queries) UpdateMessageMentionsUsers(ctx context.Context, arg UpdateMessageMentionsUsersParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateMessageMentionsUsers, arg.MentionsUsers, arg.ID, arg.AuthorID)
}
