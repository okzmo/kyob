// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, email, username, display_name, avatar, password
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, email, username, password, display_name, avatar, banner, about, main_color, created_at, updated_at
`

type CreateUserParams struct {
	ID          string      `json:"id"`
	Email       string      `json:"email"`
	Username    string      `json:"username"`
	DisplayName string      `json:"display_name"`
	Avatar      pgtype.Text `json:"avatar"`
	Password    string      `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.DisplayName,
		arg.Avatar,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.DisplayName,
		&i.Avatar,
		&i.Banner,
		&i.About,
		&i.MainColor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, username, password, display_name, avatar, banner, about, main_color, created_at, updated_at FROM users WHERE email = $1 OR username = $2
`

type GetUserParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.DisplayName,
		&i.Avatar,
		&i.Banner,
		&i.About,
		&i.MainColor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, username, password, display_name, avatar, banner, about, main_color, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.DisplayName,
		&i.Avatar,
		&i.Banner,
		&i.About,
		&i.MainColor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserFacts = `-- name: GetUserFacts :many
SELECT id, label, value FROM facts WHERE user_id = $1
`

type GetUserFactsRow struct {
	ID    string      `json:"id"`
	Label pgtype.Text `json:"label"`
	Value pgtype.Text `json:"value"`
}

func (q *Queries) GetUserFacts(ctx context.Context, userID string) ([]GetUserFactsRow, error) {
	rows, err := q.db.Query(ctx, getUserFacts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserFactsRow
	for rows.Next() {
		var i GetUserFactsRow
		if err := rows.Scan(&i.ID, &i.Label, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLinks = `-- name: GetUserLinks :many
SELECT id, label, url FROM links WHERE user_id = $1
`

type GetUserLinksRow struct {
	ID    string      `json:"id"`
	Label pgtype.Text `json:"label"`
	Url   pgtype.Text `json:"url"`
}

func (q *Queries) GetUserLinks(ctx context.Context, userID string) ([]GetUserLinksRow, error) {
	rows, err := q.db.Query(ctx, getUserLinks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserLinksRow
	for rows.Next() {
		var i GetUserLinksRow
		if err := rows.Scan(&i.ID, &i.Label, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserMinimal = `-- name: GetUserMinimal :one
SELECT id, username, display_name, avatar FROM users WHERE id = $1
`

type GetUserMinimalRow struct {
	ID          string      `json:"id"`
	Username    string      `json:"username"`
	DisplayName string      `json:"display_name"`
	Avatar      pgtype.Text `json:"avatar"`
}

func (q *Queries) GetUserMinimal(ctx context.Context, id string) (GetUserMinimalRow, error) {
	row := q.db.QueryRow(ctx, getUserMinimal, id)
	var i GetUserMinimalRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.Avatar,
	)
	return i, err
}

const getUsersByIds = `-- name: GetUsersByIds :many
SELECT id, username, display_name, avatar FROM users WHERE id = ANY($1::text[])
`

type GetUsersByIdsRow struct {
	ID          string      `json:"id"`
	Username    string      `json:"username"`
	DisplayName string      `json:"display_name"`
	Avatar      pgtype.Text `json:"avatar"`
}

func (q *Queries) GetUsersByIds(ctx context.Context, dollar_1 []string) ([]GetUsersByIdsRow, error) {
	rows, err := q.db.Query(ctx, getUsersByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByIdsRow
	for rows.Next() {
		var i GetUsersByIdsRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.DisplayName,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAbout = `-- name: UpdateUserAbout :exec
UPDATE users
  set about = $2
WHERE id = $1
`

type UpdateUserAboutParams struct {
	ID    string `json:"id"`
	About []byte `json:"about"`
}

func (q *Queries) UpdateUserAbout(ctx context.Context, arg UpdateUserAboutParams) error {
	_, err := q.db.Exec(ctx, updateUserAbout, arg.ID, arg.About)
	return err
}

const updateUserAvatarNBanner = `-- name: UpdateUserAvatarNBanner :exec
UPDATE users
  set avatar = $2, banner = $3, main_color = $4
WHERE id = $1
`

type UpdateUserAvatarNBannerParams struct {
	ID        string      `json:"id"`
	Avatar    pgtype.Text `json:"avatar"`
	Banner    pgtype.Text `json:"banner"`
	MainColor pgtype.Text `json:"main_color"`
}

func (q *Queries) UpdateUserAvatarNBanner(ctx context.Context, arg UpdateUserAvatarNBannerParams) error {
	_, err := q.db.Exec(ctx, updateUserAvatarNBanner,
		arg.ID,
		arg.Avatar,
		arg.Banner,
		arg.MainColor,
	)
	return err
}

const updateUserDisplayName = `-- name: UpdateUserDisplayName :exec
UPDATE users
  set display_name = $2
WHERE id = $1
`

type UpdateUserDisplayNameParams struct {
	ID          string `json:"id"`
	DisplayName string `json:"display_name"`
}

func (q *Queries) UpdateUserDisplayName(ctx context.Context, arg UpdateUserDisplayNameParams) error {
	_, err := q.db.Exec(ctx, updateUserDisplayName, arg.ID, arg.DisplayName)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE users
  set email = $2
WHERE id = $1
`

type UpdateUserEmailParams struct {
	ID    string `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserEmail, arg.ID, arg.Email)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
  set password = $2
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID       string `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.Password)
	return err
}

const updateUserUsername = `-- name: UpdateUserUsername :execresult
UPDATE users
  set username = $2
WHERE id = $1
`

type UpdateUserUsernameParams struct {
	ID       string `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUserUsername(ctx context.Context, arg UpdateUserUsernameParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateUserUsername, arg.ID, arg.Username)
}
