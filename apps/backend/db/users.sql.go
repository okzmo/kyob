// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, username, display_name, avatar, password
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, email, username, password, display_name, avatar, banner, about, created_at, updated_at
`

type CreateUserParams struct {
	Email       string      `json:"email"`
	Username    string      `json:"username"`
	DisplayName string      `json:"display_name"`
	Avatar      pgtype.Text `json:"avatar"`
	Password    string      `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.DisplayName,
		arg.Avatar,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.DisplayName,
		&i.Avatar,
		&i.Banner,
		&i.About,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, username, password, display_name, avatar, banner, about, created_at, updated_at FROM users WHERE email = $1 OR username = $2
`

type GetUserParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.DisplayName,
		&i.Avatar,
		&i.Banner,
		&i.About,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserAbout = `-- name: UpdateUserAbout :exec
UPDATE users
  set about = $2
WHERE id = $1
`

type UpdateUserAboutParams struct {
	ID    int64       `json:"id"`
	About pgtype.Text `json:"about"`
}

func (q *Queries) UpdateUserAbout(ctx context.Context, arg UpdateUserAboutParams) error {
	_, err := q.db.Exec(ctx, updateUserAbout, arg.ID, arg.About)
	return err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE users
  set avatar = $2
WHERE id = $1
`

type UpdateUserAvatarParams struct {
	ID     int64       `json:"id"`
	Avatar pgtype.Text `json:"avatar"`
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.Exec(ctx, updateUserAvatar, arg.ID, arg.Avatar)
	return err
}

const updateUserDisplayName = `-- name: UpdateUserDisplayName :exec
UPDATE users
  set display_name = $2
WHERE id = $1
`

type UpdateUserDisplayNameParams struct {
	ID          int64  `json:"id"`
	DisplayName string `json:"display_name"`
}

func (q *Queries) UpdateUserDisplayName(ctx context.Context, arg UpdateUserDisplayNameParams) error {
	_, err := q.db.Exec(ctx, updateUserDisplayName, arg.ID, arg.DisplayName)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE users
  set email = $2
WHERE id = $1
`

type UpdateUserEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserEmail, arg.ID, arg.Email)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
  set password = $2
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.Password)
	return err
}

const updateUserUsername = `-- name: UpdateUserUsername :exec
UPDATE users
  set username = $2
WHERE id = $1
`

type UpdateUserUsernameParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUserUsername(ctx context.Context, arg UpdateUserUsernameParams) error {
	_, err := q.db.Exec(ctx, updateUserUsername, arg.ID, arg.Username)
	return err
}
