// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tokens.sql

package db

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
  id, user_id, token, expire_at, type
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, token, type, expire_at
`

type CreateTokenParams struct {
	ID       string    `json:"id"`
	UserID   string    `json:"user_id"`
	Token    string    `json:"token"`
	ExpireAt time.Time `json:"expire_at"`
	Type     string    `json:"type"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.ExpireAt,
		arg.Type,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Type,
		&i.ExpireAt,
	)
	return i, err
}

const deleteRememberMeToken = `-- name: DeleteRememberMeToken :exec
DELETE FROM tokens WHERE user_id = $1 AND type = 'REMEMBER_ME_TOKEN'
`

func (q *Queries) DeleteRememberMeToken(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteRememberMeToken, userID)
	return err
}

const verifyToken = `-- name: VerifyToken :one
SELECT id, email, username, password, display_name, avatar, banner, about, gradient_top, gradient_bottom, created_at, updated_at FROM users WHERE id = (SELECT user_id FROM tokens WHERE token = $1)
`

func (q *Queries) VerifyToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRow(ctx, verifyToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.DisplayName,
		&i.Avatar,
		&i.Banner,
		&i.About,
		&i.GradientTop,
		&i.GradientBottom,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
